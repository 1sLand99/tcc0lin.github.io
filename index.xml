<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>tcc0lin&#39;s blog</title>
        <link>https://tcc0lin.github.io/</link>
        <description>tcc0lin&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 30 Aug 2024 23:01:31 &#43;0800</lastBuildDate>
            <atom:link href="https://tcc0lin.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>KeyAttestation原理理解</title>
    <link>https://tcc0lin.github.io/keyattestation%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3/</link>
    <pubDate>Fri, 30 Aug 2024 23:01:31 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/keyattestation%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3/</guid>
    <description><![CDATA[结合github项目KeyAttestation来学习KeyAttestation原理 一、项目结构 1.1 App展示 页面展示来自于attestat]]></description>
</item><item>
    <title>Linux Kprobe原理探究</title>
    <link>https://tcc0lin.github.io/linux-kprobe%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</link>
    <pubDate>Fri, 26 Apr 2024 21:19:53 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/linux-kprobe%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</guid>
    <description><![CDATA[之前在分析其他安全厂商App的防护策略时，想要设计个风控分析沙盒来实现对于App行为的全面监控，包括 App访问、操作了哪些文件 执行了哪些操作]]></description>
</item><item>
    <title>基于Kernel Kprobe机制的改机架构实现</title>
    <link>https://tcc0lin.github.io/%E5%9F%BA%E4%BA%8Ekernel-kprobe%E6%9C%BA%E5%88%B6%E7%9A%84%E6%94%B9%E6%9C%BA%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Wed, 27 Mar 2024 18:51:18 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/%E5%9F%BA%E4%BA%8Ekernel-kprobe%E6%9C%BA%E5%88%B6%E7%9A%84%E6%94%B9%E6%9C%BA%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[一、背景如上文Linux Kprobe原理探究 所提及的，Kprobe有多种玩法，在设备改机场景中可以通过对内核系统函数的篡改以完成改机的目的，]]></description>
</item><item>
    <title>LSPlant源码学习</title>
    <link>https://tcc0lin.github.io/lsplant%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Thu, 07 Mar 2024 23:09:44 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/lsplant%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[LSPlant是LSPosed官方推出的新的ART hook框架，用来替代LSPosed之前使用的YAHFA框架 从官方README上看，对于L]]></description>
</item><item>
    <title>Zygisk-v27.0源码阅读</title>
    <link>https://tcc0lin.github.io/zygisk-v27.0%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
    <pubDate>Wed, 06 Mar 2024 22:56:31 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/zygisk-v27.0%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid>
    <description><![CDATA[隔了很久再读Magisk源码中关于Zygisk的部分，上次翻源码还是v25.0，这次已经更新到了v27.0。粗略扫了眼，变化的地方还是挺多的]]></description>
</item><item>
    <title>Art方法调用流程分析</title>
    <link>https://tcc0lin.github.io/art%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</link>
    <pubDate>Fri, 01 Mar 2024 19:51:22 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/art%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[一、关于JavaVMJava是一门跨平台的语言，系统实际运行的是Java字节码，由Java虚拟机去解释执行。解释执行的过程可以看做是一个循环]]></description>
</item><item>
    <title>基于CEF和定制Chromium的浏览器集群</title>
    <link>https://tcc0lin.github.io/%E5%9F%BA%E4%BA%8Ecef%E5%92%8C%E5%AE%9A%E5%88%B6chromium%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9B%86%E7%BE%A4/</link>
    <pubDate>Fri, 01 Mar 2024 09:03:01 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/%E5%9F%BA%E4%BA%8Ecef%E5%92%8C%E5%AE%9A%E5%88%B6chromium%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9B%86%E7%BE%A4/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>Arm与Arm64的栈平衡理解</title>
    <link>https://tcc0lin.github.io/arm%E4%B8%8Earm64%E7%9A%84%E6%A0%88%E5%B9%B3%E8%A1%A1%E7%90%86%E8%A7%A3/</link>
    <pubDate>Tue, 27 Feb 2024 16:46:38 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/arm%E4%B8%8Earm64%E7%9A%84%E6%A0%88%E5%B9%B3%E8%A1%A1%E7%90%86%E8%A7%A3/</guid>
    <description><![CDATA[https://blog.csdn.net/boildoctor/article/details/123402047 https://www.cnblogs.com/sky-heaven/p/15885335.html https://blog.csdn.net/boildoctor/article/details/123402047 https://www.jianshu.com/p/b6071091abdc https://blog.csdn.net/heshuangzong/article/details/126911474]]></description>
</item><item>
    <title>Dobby 短指令hook方式</title>
    <link>https://tcc0lin.github.io/dobby-%E7%9F%AD%E6%8C%87%E4%BB%A4hook%E6%96%B9%E5%BC%8F/</link>
    <pubDate>Wed, 21 Feb 2024 19:25:42 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/dobby-%E7%9F%AD%E6%8C%87%E4%BB%A4hook%E6%96%B9%E5%BC%8F/</guid>
    <description><![CDATA[从上一篇Dobby的文章可以了解到Dobby对于inline hook的实现是通过替换origin method的前三行指令（前12个字节）来跳]]></description>
</item><item>
    <title>Dobby框架源码学习</title>
    <link>https://tcc0lin.github.io/dobby%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Wed, 21 Feb 2024 14:54:39 &#43;0800</pubDate><author>
        <name>tcc0lin</name>
    </author><guid>https://tcc0lin.github.io/dobby%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[Dobby框架推出的时间也不短了，从Github提交记录上看最早在17年就有提交了。这期间陆陆续续在使用Dobby框架，虽然对原理有大概的了]]></description>
</item></channel>
</rss>
